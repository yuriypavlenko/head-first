import Cafe.CaffeineBeverageWithHook;
import Cafe.CoffeeWithHook;

/**
 * Пример реализация паттерна "Шаблонный метод" с хуком
 *
 * Абстрактный суперкласс содержит общий алгоритм (шаблонный метод) - в данном случае, по приготовлению чая или кофе,
 * не дает его менять наследникам (объявлен как final).
 * При этом наследникам предоставлена возможность переопределять и реализовывать некоторые методы (шаги этого алгоритма)
 *
 * Кроме того в алгоритме реализован так называемый хук - это метод, вызываемый основным алгоритмом.
 * Он пустой у суперкласса, а субклассы, могут его у себя реализовать. Тогда он будет вызван суперклассом
 * во время исполнения алгоритма. Получается, что через такой хук суперкласс разрешает субклассам влиять на алгоритм.
 *
 * Это реализация еще одного основного принципа: "не вызывайте нас, мы сами вас вызовем",
 * т.е. компоненты более низкого уровня не должны обращаться к компонентам более высокого уровня, должно быть наоборот.
 */
public class CafeTestDrive {
    public static void main(String[] args) {
        CoffeeWithHook coffeeWithHook = new CoffeeWithHook();
        System.out.println("Making coffee...");
        coffeeWithHook.prepareRecipe();
    }
}
