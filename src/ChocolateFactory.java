import ChocolateFactory.*;

/**
 * Пример реализация паттерна "Одиночка" (Синглтон)
 *
 * Назначение его в предоставлении одного единственного объекта
 * Должен быть создан максимум один такой объект.
 * Надо сделать так, чтобы нельзя было создать второй объект.
 * Надо сделать так, чтобы этот объект создавался только тогда, когда он понадобился.
 *
 * Решение:
 * в классе этого объекта конструктор объявляется как private, т.е. создать объект через new невозможно!
 * для создания объекта этого класса используется статический метод, этот метод создает объект (так как он находится в
 * рамках данного класса, то ему доступен конструктор!) и хранит его в статической переменной этого класса,
 * а так же он каждый раз проверяет, создан ли ранее объект и если был ранее создан, то не создает его а возвращает.
 * Для того, чтобы при использовании многопоточности метод случайно не создал два объекта - код проверки
 * на наличие объекта и создания объекта помещен в блок synchronized - это гарантирует,
 * что если этот код выполняется в рамках одного из потоков, другие потоки будут ждать завершения его выполнения.
 */
public class ChocolateFactory {
    public static void main(String[] args) {
        ChocolateBoiler boiler = ChocolateBoiler.getInstance();
        boiler.fill();
        boiler.boil();
        boiler.drain();
        System.out.println("Done!");
    }
}
